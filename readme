# 🏢 Sistem Manajemen Gudang

Sistem manajemen pengguna dan produk gudang berbasis web dengan fitur lengkap registrasi, aktivasi email, CRUD produk, dan manajemen profil.

> **Proyek UTS - Pemrograman Web bayu jois wanviendi**

---

## 📋 Fitur Utama

### Manajemen User
- ✅ Registrasi pengguna sebagai Admin Gudang
- ✅ Validasi email unik (tidak boleh duplikat)
- ✅ Pengiriman email aktivasi otomatis
- ✅ Aktivasi akun melalui link email
- ✅ Login dengan validasi status AKTIF
- ✅ Lupa password & reset password via email
- ✅ Ubah password dari dashboard
- ✅ Update profil pengguna

### Manajemen Produk
- ✅ Create, Read, Update, Delete (CRUD) produk
- ✅ Validasi kode produk unik pe
- ✅ Activity logs otomatis

---

## 📁 Struktur Folder

```
warehouse-management/
│
├── api/
│   ├── auth.php          # API Autentikasi (register, login, logout, reset password)
│   ├── products.php      # API CRUD Produk
│   └── user.php          # API User Profile
│
├── css/
│   └── style.css         # Stylesheet utama
│
├── js/
│   └── app.js            # JavaScript frontend
|---pages/
|   |__
|      active.php
       dashboard.php
       forgot_password.php
       login.php
       register.php
       reset_password.php
       
├── config.php            # Konfigurasi database & helper functions
├── index.html            # Halaman utama
├── database_warehouse.sql # Database schema & sample data
├── .htaccess             # Apache configuration (opsional)
├── .gitignore            # Git ignore file
└── README.md             # Dokumentasi ini
```

---

## 🚀 Instalasi & Setup

### 1. Requirement
- PHP 7.4 atau lebih tinggi
- MySQL 5.7 atau lebih tinggi
- Apache/Nginx Web Server (XAMPP/WAMP/MAMP)
- Browser modern (Chrome, Firefox, Edge)

### 2. Clone/Download Repository

**Via Git:**
```bash
git clone https://github.com/username/warehouse-management.git
cd warehouse-management
```

**Atau download ZIP** dan extract ke folder `htdocs/` (XAMPP) atau `www/` (WAMP)

### 3. Setup Database

**A. Buat Database:**
- Buka PHPMyAdmin: `http://localhost/phpmyadmin`
- Klik "New" untuk buat database baru
- Nama database: `warehouse_management`
- Collation: `utf8mb4_unicode_ci`

**B. Import Database:**
- Pilih database `warehouse_management`
- Klik tab "Import"
- Pilih file `database_warehouse.sql`
- Klik "Go"

**Atau via Command Line:**
```bash
mysql -u root -p
CREATE DATABASE warehouse_management;
exit;

mysql -u root -p warehouse_management < database_warehouse.sql
```

### 4. Konfigurasi

Edit file **`config.php`** sesuai environment Anda:

```php
// Konfigurasi Database
define('DB_HOST', 'localhost');
define('DB_USER', 'root');           // Sesuaikan username MySQL
define('DB_PASS', '');               // Sesuaikan password MySQL (XAMPP default: kosong)
define('DB_NAME', 'warehouse_management');

// Base URL Aplikasi
define('BASE_URL', 'http://localhost/warehouse-management/'); // Sesuaikan dengan nama folder
```

**PENTING:** Pastikan `BASE_URL` sesuai dengan lokasi folder Anda!

### 5. Akses Aplikasi

Buka browser dan akses:
```
http://localhost/warehouse-management/index.html
```

---

## 🧪 Testing / Demo

### Test User (dari sample data):
- **Email:** admin@warehouse.com
- **Password:** admin123
- **Status:** ACTIVE (bisa langsung login)

### Test Fitur Lengkap:

**1. Registrasi Pengguna Baru:**
- Klik "Belum punya akun? Daftar"
- Isi form registrasi
- Link aktivasi akan muncul di alert (simulasi email)
- Copy link dan paste di browser untuk aktivasi

**2. Login:**
- Gunakan email & password yang sudah diaktivasi
- Atau gunakan test user di atas

**3. Dashboard:**
- Lihat statistik produk
- Kelola produk (Tambah, Edit, Hapus)
- Update profil
- Ubah password

**4. Lupa Password:**
- Klik "Lupa Password" di halaman login
- Masukkan email
- Link reset akan muncul di alert
- Buat password baru

**5. Logout:**
- Klik tombol "Logout" di header

---

## 📊 Database Schema

### Tabel Utama

**1. users** - Data pengguna
```sql
- id (INT, PRIMARY KEY)
- name (VARCHAR 255)
- email (VARCHAR 255, UNIQUE)
- password (VARCHAR 255, hashed)
- status (ENUM: ACTIVE, INACTIVE)
- created_at, updated_at (TIMESTAMP)
```

**2. products** - Data produk
```sql
- id (INT, PRIMARY KEY)
- user_id (INT, FOREIGN KEY)
- code (VARCHAR 50, UNIQUE)
- name (VARCHAR 255)
- category (VARCHAR 100)
- stock (INT)
- price (DECIMAL 15,2)
- description (TEXT)
- created_at, updated_at (TIMESTAMP)
```

**3. activation_tokens** - Token aktivasi
```sql
- id (INT, PRIMARY KEY)
- user_id (INT, FOREIGN KEY)
- token (VARCHAR 255, UNIQUE)
- expires_at (TIMESTAMP)
```

**4. reset_password_tokens** - Token reset password
```sql
- id (INT, PRIMARY KEY)
- user_id (INT, FOREIGN KEY)
- token (VARCHAR 255, UNIQUE)
- expires_at (TIMESTAMP)
```

**5. activity_logs** - Log aktivitas user
```sql
- id (INT, PRIMARY KEY)
- user_id (INT, FOREIGN KEY)
- action (VARCHAR 50)
- description (TEXT)
- created_at (TIMESTAMP)
```

---

## 🔌 API Endpoints

### Authentication API (`api/auth.php`)

| Method | Endpoint | Description |
|--------|----------|-------------|
| POST | `?action=register` | Registrasi user baru |
| POST | `?action=login` | Login user |
| POST | `?action=logout` | Logout user |
| POST | `?action=forgot-password` | Request reset password |
| POST | `?action=reset-password` | Reset password |
| GET | `?action=activate&token=xxx` | Aktivasi akun |
| GET | `?action=check` | Cek session |

### Products API (`api/products.php`)

| Method | Endpoint | Description |
|--------|----------|-------------|
| GET | `/` | Get all products |
| GET | `?id=1` | Get single product |
| GET | `?stats=1` | Get statistics |
| POST | `/` | Create product |
| PUT | `/` | Update product |
| DELETE | `/` | Delete product |

### User API (`api/user.php`)

| Method | Endpoint | Description |
|--------|----------|-------------|
| GET | `/` | Get user profile |
| POST | `action=update-profile` | Update profile |
| POST | `action=change-password` | Change password |

---

## 🔒 Security Features

- ✅ Password hashing dengan bcrypt
- ✅ SQL injection prevention (prepared statements)
- ✅ Input validation & sanitization
- ✅ Session management
- ✅ Token expiration (24 jam untuk aktivasi, 1 jam untuk reset)
- ✅ CORS configuration
- ✅ Activity logging

---

## 📝 Catatan Penting

### Mode Development (Default):
- Email disimpan di file `email_logs.txt` untuk testing
- Error reporting aktif
- Session timeout: 24 menit (default PHP)

### Untuk Production (Deploy ke hosting):
- Ganti `error_reporting(E_ALL)` menjadi `error_reporting(0)` di `config.php`
- Install PHPMailer: `composer require phpmailer/phpmailer`
- Uncomment code PHPMailer di fungsi `sendEmail()` di `config.php`
- Setup SMTP credentials dengan benar
- Set `BASE_URL` sesuai domain produksi

---

## 🐛 Troubleshooting

### Error: Connection refused / Cannot connect to database
**Solusi:**
- Pastikan MySQL service berjalan (di XAMPP Control Panel)
- Cek username & password di `config.php`
- Pastikan database `warehouse_management` sudah dibuat

### Error: 404 Not Found pada API
**Solusi:**
- Cek `BASE_URL` di `config.php` sudah benar
- Pastikan struktur folder sesuai dokumentasi
- Restart Apache di XAMPP

### Email tidak terkirim (production)
**Solusi:**
- Cek file `email_logs.txt` untuk development mode
- Pastikan PHPMailer sudah terinstall
- Cek SMTP credentials di `config.php`
- Untuk Gmail: aktifkan "App Password" (bukan password biasa)

### Session expired terus
**Solusi:**
- Cek folder `tmp/` atau `sessions/` writable
- Clear browser cookies
- Restart Apache

---

## 🎓 Informasi Proyek

**Mata Kuliah:** Pemrograman Web  
**Jenis:** Ujian Tengah Semester (UTS)  
**Teknologi:** PHP, MySQL, HTML, CSS, JavaScript  
**Database:** MySQL dengan stored procedures, triggers, dan views

---

## 📱 Browser Support

- ✅ Google Chrome (Latest)
- ✅ Mozilla Firefox (Latest)
- ✅ Microsoft Edge (Latest)
- ✅ Safari (Latest)

---

## 📞 Kontak

Jika ada pertanyaan atau kendala, silakan hubungi:
- **Email:** support@warehouse.com
- **GitHub Issues:** [Link Repository]

---

## 📄 License

MIT License - Free to use for educational purposes
## ✅ Checklist Setup

Pastikan semua langkah ini sudah dilakukan:

- [ ] XAMPP/WAMP sudah terinstall dan berjalan
- [ ] Database `warehouse_management` sudah dibuat
- [ ] File `database_warehouse.sql` sudah diimport
- [ ] File `config.php` sudah diedit (DB credentials & BASE_URL)
- [ ] Bisa akses `http://localhost/warehouse-management/index.html`
- [ ] Test login dengan user: admin@warehouse.com / admin123
- [ ] Test semua fitur CRUD produk
- [ ] Test registrasi user baru
- [ ] Test ubah password

**Jika semua checklist ✅, aplikasi siap digunakan!** 🎉